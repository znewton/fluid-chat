diff --git a/dist/documentDeltaConnection.js b/dist/documentDeltaConnection.js
index 5a37e0767968e98b6b0149773c4cae1b288e17de..32d3b1a358031d262f160ac1f1654e015b9c0e05 100644
--- a/dist/documentDeltaConnection.js
+++ b/dist/documentDeltaConnection.js
@@ -21,7 +21,7 @@ class R11sDocumentDeltaConnection extends driver_base_1.DocumentDeltaConnection
             },
             reconnection: false,
             // Default to websocket connection, with long-polling disabled
-            transports: ["websocket"],
+            transports: ["polling"],
             timeout: timeoutMs,
         });
         const connectMessage = {
diff --git a/dist/documentDeltaConnection.js.map b/dist/documentDeltaConnection.js.map
index 9c16f7b994fd573e7c0c228f6eea354a54e4e781..1130899afbf2327b859ba958aa866c6d8f2ad25d 100644
--- a/dist/documentDeltaConnection.js.map
+++ b/dist/documentDeltaConnection.js.map
@@ -1 +1 @@
-{"version":3,"file":"documentDeltaConnection.js","sourceRoot":"","sources":["../src/documentDeltaConnection.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAGH,6DAAsE;AAKtE,6CAA4E;AAC5E,qDAA+D;AAE/D,MAAM,gBAAgB,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAElE;;GAEG;AACH,MAAa,2BAA4B,SAAQ,qCAAuB;IAC7D,MAAM,CAAC,KAAK,CAAC,MAAM,CACtB,QAAgB,EAChB,EAAU,EACV,KAAoB,EACpB,EAA+B,EAC/B,MAAe,EACf,GAAW,EACX,MAAwB,EACxB,SAAS,GAAG,KAAK;QACjB,MAAM,MAAM,GAAG,EAAE,CACb,GAAG,EACH;YACI,KAAK,EAAE;gBACH,UAAU,EAAE,EAAE;gBACd,QAAQ;aACX;YACD,YAAY,EAAE,KAAK;YACnB,8DAA8D;YAC9D,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,OAAO,EAAE,SAAS;SACrB,CAAC,CAAC;QAEP,MAAM,cAAc,GAAa;YAC7B,MAAM;YACN,EAAE;YACF,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ;YACR,KAAK;YACL,QAAQ,EAAE,gBAAgB;YAC1B,cAAc,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,2BAAa,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SAC5F,CAAC;QAEF,wCAAwC;QACxC,MAAM,2BAA2B,GAAG,IAAI,CAAC;QACzC,MAAM,eAAe,GAAG,IAAI,2BAA2B,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,2BAA2B,CAAC,CAAC;QAEzG,MAAM,eAAe,CAAC,UAAU,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAC5D,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;OAEG;IACO,iBAAiB,CAAC,OAAe,EAAE,KAAW,EAAE,QAAQ,GAAG,IAAI;QACrE,wDAAwD;QACxD,wGAAwG;QACxG,4CAA4C;QAC5C,IAAI,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,IAAI,OAAO,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAA,KAAK,QAAQ,EAAE;YACjF,OAAO,IAAA,uCAA0B,EAAC,KAAyB,EAAE,OAAO,CAAC,CAAC;SACzE;aAAM;YACH,OAAO,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC5D;IACL,CAAC;CACJ;AAtDD,kEAsDC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITelemetryLogger } from \"@fluidframework/common-definitions\";\nimport { DocumentDeltaConnection } from \"@fluidframework/driver-base\";\nimport { IDocumentDeltaConnection } from \"@fluidframework/driver-definitions\";\nimport { IAnyDriverError } from \"@fluidframework/driver-utils\";\nimport { IClient, IConnect } from \"@fluidframework/protocol-definitions\";\nimport type { io as SocketIOClientStatic } from \"socket.io-client\";\nimport { errorObjectFromSocketError, IR11sSocketError } from \"./errorUtils\";\nimport { pkgVersion as driverVersion } from \"./packageVersion\";\n\nconst protocolVersions = [\"^0.4.0\", \"^0.3.0\", \"^0.2.0\", \"^0.1.0\"];\n\n/**\n * Wrapper over the shared one for driver specific translation.\n */\nexport class R11sDocumentDeltaConnection extends DocumentDeltaConnection {\n    public static async create(\n        tenantId: string,\n        id: string,\n        token: string | null,\n        io: typeof SocketIOClientStatic,\n        client: IClient,\n        url: string,\n        logger: ITelemetryLogger,\n        timeoutMs = 20000): Promise<IDocumentDeltaConnection> {\n        const socket = io(\n            url,\n            {\n                query: {\n                    documentId: id,\n                    tenantId,\n                },\n                reconnection: false,\n                // Default to websocket connection, with long-polling disabled\n                transports: [\"websocket\"],\n                timeout: timeoutMs,\n            });\n\n        const connectMessage: IConnect = {\n            client,\n            id,\n            mode: client.mode,\n            tenantId,\n            token,  // Token is going to indicate tenant level information, etc...\n            versions: protocolVersions,\n            relayUserAgent: [client.details.environment, ` driverVersion:${driverVersion}`].join(\";\"),\n        };\n\n        // TODO: expose to host at factory level\n        const enableLongPollingDowngrades = true;\n        const deltaConnection = new R11sDocumentDeltaConnection(socket, id, logger, enableLongPollingDowngrades);\n\n        await deltaConnection.initialize(connectMessage, timeoutMs);\n        return deltaConnection;\n    }\n\n    /**\n     * Error raising for socket.io issues\n     */\n    protected createErrorObject(handler: string, error?: any, canRetry = true): IAnyDriverError {\n        // Note: we suspect the incoming error object is either:\n        // - a socketError: add it to the R11sError object for driver to be able to parse it and reason over it.\n        // - anything else: let base class handle it\n        if (canRetry && Number.isInteger(error?.code) && typeof error?.message === \"string\") {\n            return errorObjectFromSocketError(error as IR11sSocketError, handler);\n        } else {\n            return super.createErrorObject(handler, error, canRetry);\n        }\n    }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"documentDeltaConnection.js","sourceRoot":"","sources":["../src/documentDeltaConnection.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAGH,6DAAsE;AAKtE,6CAA4E;AAC5E,qDAA+D;AAE/D,MAAM,gBAAgB,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAElE;;GAEG;AACH,MAAa,2BAA4B,SAAQ,qCAAuB;IAC7D,MAAM,CAAC,KAAK,CAAC,MAAM,CACtB,QAAgB,EAChB,EAAU,EACV,KAAoB,EACpB,EAA+B,EAC/B,MAAe,EACf,GAAW,EACX,MAAwB,EACxB,SAAS,GAAG,KAAK;QACjB,MAAM,MAAM,GAAG,EAAE,CACb,GAAG,EACH;YACI,KAAK,EAAE;gBACH,UAAU,EAAE,EAAE;gBACd,QAAQ;aACX;YACD,YAAY,EAAE,KAAK;YACnB,8DAA8D;YAC9D,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,OAAO,EAAE,SAAS;SACrB,CAAC,CAAC;QAEP,MAAM,cAAc,GAAa;YAC7B,MAAM;YACN,EAAE;YACF,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ;YACR,KAAK;YACL,QAAQ,EAAE,gBAAgB;YAC1B,cAAc,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,2BAAa,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SAC5F,CAAC;QAEF,wCAAwC;QACxC,MAAM,2BAA2B,GAAG,IAAI,CAAC;QACzC,MAAM,eAAe,GAAG,IAAI,2BAA2B,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,2BAA2B,CAAC,CAAC;QAEzG,MAAM,eAAe,CAAC,UAAU,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAC5D,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;OAEG;IACO,iBAAiB,CAAC,OAAe,EAAE,KAAW,EAAE,QAAQ,GAAG,IAAI;QACrE,wDAAwD;QACxD,wGAAwG;QACxG,4CAA4C;QAC5C,IAAI,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,IAAI,OAAO,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAA,KAAK,QAAQ,EAAE;YACjF,OAAO,IAAA,uCAA0B,EAAC,KAAyB,EAAE,OAAO,CAAC,CAAC;SACzE;aAAM;YACH,OAAO,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC5D;IACL,CAAC;CACJ;AAtDD,kEAsDC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITelemetryLogger } from \"@fluidframework/common-definitions\";\nimport { DocumentDeltaConnection } from \"@fluidframework/driver-base\";\nimport { IDocumentDeltaConnection } from \"@fluidframework/driver-definitions\";\nimport { IAnyDriverError } from \"@fluidframework/driver-utils\";\nimport { IClient, IConnect } from \"@fluidframework/protocol-definitions\";\nimport type { io as SocketIOClientStatic } from \"socket.io-client\";\nimport { errorObjectFromSocketError, IR11sSocketError } from \"./errorUtils\";\nimport { pkgVersion as driverVersion } from \"./packageVersion\";\n\nconst protocolVersions = [\"^0.4.0\", \"^0.3.0\", \"^0.2.0\", \"^0.1.0\"];\n\n/**\n * Wrapper over the shared one for driver specific translation.\n */\nexport class R11sDocumentDeltaConnection extends DocumentDeltaConnection {\n    public static async create(\n        tenantId: string,\n        id: string,\n        token: string | null,\n        io: typeof SocketIOClientStatic,\n        client: IClient,\n        url: string,\n        logger: ITelemetryLogger,\n        timeoutMs = 20000): Promise<IDocumentDeltaConnection> {\n        const socket = io(\n            url,\n            {\n                query: {\n                    documentId: id,\n                    tenantId,\n                },\n                reconnection: false,\n                // Default to websocket connection, with long-polling disabled\n                transports: [\"polling\"],\n                timeout: timeoutMs,\n            });\n\n        const connectMessage: IConnect = {\n            client,\n            id,\n            mode: client.mode,\n            tenantId,\n            token,  // Token is going to indicate tenant level information, etc...\n            versions: protocolVersions,\n            relayUserAgent: [client.details.environment, ` driverVersion:${driverVersion}`].join(\";\"),\n        };\n\n        // TODO: expose to host at factory level\n        const enableLongPollingDowngrades = true;\n        const deltaConnection = new R11sDocumentDeltaConnection(socket, id, logger, enableLongPollingDowngrades);\n\n        await deltaConnection.initialize(connectMessage, timeoutMs);\n        return deltaConnection;\n    }\n\n    /**\n     * Error raising for socket.io issues\n     */\n    protected createErrorObject(handler: string, error?: any, canRetry = true): IAnyDriverError {\n        // Note: we suspect the incoming error object is either:\n        // - a socketError: add it to the R11sError object for driver to be able to parse it and reason over it.\n        // - anything else: let base class handle it\n        if (canRetry && Number.isInteger(error?.code) && typeof error?.message === \"string\") {\n            return errorObjectFromSocketError(error as IR11sSocketError, handler);\n        } else {\n            return super.createErrorObject(handler, error, canRetry);\n        }\n    }\n}\n"]}
\ No newline at end of file
diff --git a/lib/documentDeltaConnection.js b/lib/documentDeltaConnection.js
index 525c9bd3024960ada6c6d86b109b4ba20d981f6b..c5657d74d13670dc6bb4e08e7b9cfc1451fb6a21 100644
--- a/lib/documentDeltaConnection.js
+++ b/lib/documentDeltaConnection.js
@@ -18,7 +18,7 @@ export class R11sDocumentDeltaConnection extends DocumentDeltaConnection {
             },
             reconnection: false,
             // Default to websocket connection, with long-polling disabled
-            transports: ["websocket"],
+            transports: ["polling"],
             timeout: timeoutMs,
         });
         const connectMessage = {
diff --git a/lib/documentDeltaConnection.js.map b/lib/documentDeltaConnection.js.map
index 8b9c3d9ad13504c41f336bc5eacfc82759956336..7910785aec5ea0979a54d6cae705a2a4d9ec8dac 100644
--- a/lib/documentDeltaConnection.js.map
+++ b/lib/documentDeltaConnection.js.map
@@ -1 +1 @@
-{"version":3,"file":"documentDeltaConnection.js","sourceRoot":"","sources":["../src/documentDeltaConnection.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,uBAAuB,EAAE,MAAM,6BAA6B,CAAC;AAKtE,OAAO,EAAE,0BAA0B,EAAoB,MAAM,cAAc,CAAC;AAC5E,OAAO,EAAE,UAAU,IAAI,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAE/D,MAAM,gBAAgB,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAElE;;GAEG;AACH,MAAM,OAAO,2BAA4B,SAAQ,uBAAuB;IAC7D,MAAM,CAAC,KAAK,CAAC,MAAM,CACtB,QAAgB,EAChB,EAAU,EACV,KAAoB,EACpB,EAA+B,EAC/B,MAAe,EACf,GAAW,EACX,MAAwB,EACxB,SAAS,GAAG,KAAK;QACjB,MAAM,MAAM,GAAG,EAAE,CACb,GAAG,EACH;YACI,KAAK,EAAE;gBACH,UAAU,EAAE,EAAE;gBACd,QAAQ;aACX;YACD,YAAY,EAAE,KAAK;YACnB,8DAA8D;YAC9D,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,OAAO,EAAE,SAAS;SACrB,CAAC,CAAC;QAEP,MAAM,cAAc,GAAa;YAC7B,MAAM;YACN,EAAE;YACF,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ;YACR,KAAK;YACL,QAAQ,EAAE,gBAAgB;YAC1B,cAAc,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SAC5F,CAAC;QAEF,wCAAwC;QACxC,MAAM,2BAA2B,GAAG,IAAI,CAAC;QACzC,MAAM,eAAe,GAAG,IAAI,2BAA2B,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,2BAA2B,CAAC,CAAC;QAEzG,MAAM,eAAe,CAAC,UAAU,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAC5D,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;OAEG;IACO,iBAAiB,CAAC,OAAe,EAAE,KAAW,EAAE,QAAQ,GAAG,IAAI;QACrE,wDAAwD;QACxD,wGAAwG;QACxG,4CAA4C;QAC5C,IAAI,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,IAAI,OAAO,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAA,KAAK,QAAQ,EAAE;YACjF,OAAO,0BAA0B,CAAC,KAAyB,EAAE,OAAO,CAAC,CAAC;SACzE;aAAM;YACH,OAAO,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC5D;IACL,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITelemetryLogger } from \"@fluidframework/common-definitions\";\nimport { DocumentDeltaConnection } from \"@fluidframework/driver-base\";\nimport { IDocumentDeltaConnection } from \"@fluidframework/driver-definitions\";\nimport { IAnyDriverError } from \"@fluidframework/driver-utils\";\nimport { IClient, IConnect } from \"@fluidframework/protocol-definitions\";\nimport type { io as SocketIOClientStatic } from \"socket.io-client\";\nimport { errorObjectFromSocketError, IR11sSocketError } from \"./errorUtils\";\nimport { pkgVersion as driverVersion } from \"./packageVersion\";\n\nconst protocolVersions = [\"^0.4.0\", \"^0.3.0\", \"^0.2.0\", \"^0.1.0\"];\n\n/**\n * Wrapper over the shared one for driver specific translation.\n */\nexport class R11sDocumentDeltaConnection extends DocumentDeltaConnection {\n    public static async create(\n        tenantId: string,\n        id: string,\n        token: string | null,\n        io: typeof SocketIOClientStatic,\n        client: IClient,\n        url: string,\n        logger: ITelemetryLogger,\n        timeoutMs = 20000): Promise<IDocumentDeltaConnection> {\n        const socket = io(\n            url,\n            {\n                query: {\n                    documentId: id,\n                    tenantId,\n                },\n                reconnection: false,\n                // Default to websocket connection, with long-polling disabled\n                transports: [\"websocket\"],\n                timeout: timeoutMs,\n            });\n\n        const connectMessage: IConnect = {\n            client,\n            id,\n            mode: client.mode,\n            tenantId,\n            token,  // Token is going to indicate tenant level information, etc...\n            versions: protocolVersions,\n            relayUserAgent: [client.details.environment, ` driverVersion:${driverVersion}`].join(\";\"),\n        };\n\n        // TODO: expose to host at factory level\n        const enableLongPollingDowngrades = true;\n        const deltaConnection = new R11sDocumentDeltaConnection(socket, id, logger, enableLongPollingDowngrades);\n\n        await deltaConnection.initialize(connectMessage, timeoutMs);\n        return deltaConnection;\n    }\n\n    /**\n     * Error raising for socket.io issues\n     */\n    protected createErrorObject(handler: string, error?: any, canRetry = true): IAnyDriverError {\n        // Note: we suspect the incoming error object is either:\n        // - a socketError: add it to the R11sError object for driver to be able to parse it and reason over it.\n        // - anything else: let base class handle it\n        if (canRetry && Number.isInteger(error?.code) && typeof error?.message === \"string\") {\n            return errorObjectFromSocketError(error as IR11sSocketError, handler);\n        } else {\n            return super.createErrorObject(handler, error, canRetry);\n        }\n    }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"documentDeltaConnection.js","sourceRoot":"","sources":["../src/documentDeltaConnection.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,uBAAuB,EAAE,MAAM,6BAA6B,CAAC;AAKtE,OAAO,EAAE,0BAA0B,EAAoB,MAAM,cAAc,CAAC;AAC5E,OAAO,EAAE,UAAU,IAAI,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAE/D,MAAM,gBAAgB,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAElE;;GAEG;AACH,MAAM,OAAO,2BAA4B,SAAQ,uBAAuB;IAC7D,MAAM,CAAC,KAAK,CAAC,MAAM,CACtB,QAAgB,EAChB,EAAU,EACV,KAAoB,EACpB,EAA+B,EAC/B,MAAe,EACf,GAAW,EACX,MAAwB,EACxB,SAAS,GAAG,KAAK;QACjB,MAAM,MAAM,GAAG,EAAE,CACb,GAAG,EACH;YACI,KAAK,EAAE;gBACH,UAAU,EAAE,EAAE;gBACd,QAAQ;aACX;YACD,YAAY,EAAE,KAAK;YACnB,8DAA8D;YAC9D,UAAU,EAAE,CAAC,WAAW,CAAC;YACzB,OAAO,EAAE,SAAS;SACrB,CAAC,CAAC;QAEP,MAAM,cAAc,GAAa;YAC7B,MAAM;YACN,EAAE;YACF,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,QAAQ;YACR,KAAK;YACL,QAAQ,EAAE,gBAAgB;YAC1B,cAAc,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,kBAAkB,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SAC5F,CAAC;QAEF,wCAAwC;QACxC,MAAM,2BAA2B,GAAG,IAAI,CAAC;QACzC,MAAM,eAAe,GAAG,IAAI,2BAA2B,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,2BAA2B,CAAC,CAAC;QAEzG,MAAM,eAAe,CAAC,UAAU,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAC5D,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;OAEG;IACO,iBAAiB,CAAC,OAAe,EAAE,KAAW,EAAE,QAAQ,GAAG,IAAI;QACrE,wDAAwD;QACxD,wGAAwG;QACxG,4CAA4C;QAC5C,IAAI,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,IAAI,OAAO,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAA,KAAK,QAAQ,EAAE;YACjF,OAAO,0BAA0B,CAAC,KAAyB,EAAE,OAAO,CAAC,CAAC;SACzE;aAAM;YACH,OAAO,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC5D;IACL,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITelemetryLogger } from \"@fluidframework/common-definitions\";\nimport { DocumentDeltaConnection } from \"@fluidframework/driver-base\";\nimport { IDocumentDeltaConnection } from \"@fluidframework/driver-definitions\";\nimport { IAnyDriverError } from \"@fluidframework/driver-utils\";\nimport { IClient, IConnect } from \"@fluidframework/protocol-definitions\";\nimport type { io as SocketIOClientStatic } from \"socket.io-client\";\nimport { errorObjectFromSocketError, IR11sSocketError } from \"./errorUtils\";\nimport { pkgVersion as driverVersion } from \"./packageVersion\";\n\nconst protocolVersions = [\"^0.4.0\", \"^0.3.0\", \"^0.2.0\", \"^0.1.0\"];\n\n/**\n * Wrapper over the shared one for driver specific translation.\n */\nexport class R11sDocumentDeltaConnection extends DocumentDeltaConnection {\n    public static async create(\n        tenantId: string,\n        id: string,\n        token: string | null,\n        io: typeof SocketIOClientStatic,\n        client: IClient,\n        url: string,\n        logger: ITelemetryLogger,\n        timeoutMs = 20000): Promise<IDocumentDeltaConnection> {\n        const socket = io(\n            url,\n            {\n                query: {\n                    documentId: id,\n                    tenantId,\n                },\n                reconnection: false,\n                // Default to websocket connection, with long-polling disabled\n                transports: [\"polling\"],\n                timeout: timeoutMs,\n            });\n\n        const connectMessage: IConnect = {\n            client,\n            id,\n            mode: client.mode,\n            tenantId,\n            token,  // Token is going to indicate tenant level information, etc...\n            versions: protocolVersions,\n            relayUserAgent: [client.details.environment, ` driverVersion:${driverVersion}`].join(\";\"),\n        };\n\n        // TODO: expose to host at factory level\n        const enableLongPollingDowngrades = true;\n        const deltaConnection = new R11sDocumentDeltaConnection(socket, id, logger, enableLongPollingDowngrades);\n\n        await deltaConnection.initialize(connectMessage, timeoutMs);\n        return deltaConnection;\n    }\n\n    /**\n     * Error raising for socket.io issues\n     */\n    protected createErrorObject(handler: string, error?: any, canRetry = true): IAnyDriverError {\n        // Note: we suspect the incoming error object is either:\n        // - a socketError: add it to the R11sError object for driver to be able to parse it and reason over it.\n        // - anything else: let base class handle it\n        if (canRetry && Number.isInteger(error?.code) && typeof error?.message === \"string\") {\n            return errorObjectFromSocketError(error as IR11sSocketError, handler);\n        } else {\n            return super.createErrorObject(handler, error, canRetry);\n        }\n    }\n}\n"]}
\ No newline at end of file
diff --git a/src/documentDeltaConnection.ts b/src/documentDeltaConnection.ts
index 8a2fc14d9f1c237d4ccf98942a880ea5a48e56a3..e375cface203c25569ce081fb4f74ef5a6e75981 100644
--- a/src/documentDeltaConnection.ts
+++ b/src/documentDeltaConnection.ts
@@ -36,7 +36,7 @@ export class R11sDocumentDeltaConnection extends DocumentDeltaConnection {
                 },
                 reconnection: false,
                 // Default to websocket connection, with long-polling disabled
-                transports: ["websocket"],
+                transports: ["polling"],
                 timeout: timeoutMs,
             });
 
